Index: src/Am/상근이알람/AlarmEx999.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Am/상근이알람/AlarmEx999.java b/src/Am/상근이알람/AlarmEx999.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Am/상근이알람/AlarmEx999.java	(date 1727196336000)
@@ -0,0 +1,16 @@
+package Am.상근이알람;
+// 교수님이 푼문제
+import java.util.Scanner;
+
+public class AlarmEx999 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int hour =sc.nextInt();
+        int min = sc.nextInt();
+        int calc = hour * 60 + min;
+        if (calc < 45 ) {
+            calc = 24* 60 +min;
+        } calc -= 45;
+        System.out.printf("%d시 %d분\n", (calc / 60), (calc % 60));
+    }
+}
Index: src/Ao/while반복문/WhileEx1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ao/while반복문/WhileEx1.java b/src/Ao/while반복문/WhileEx1.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ao/while반복문/WhileEx1.java	(date 1727196336000)
@@ -0,0 +1,25 @@
+package Ao.while반복문;
+// while문 : 주어진 조건이 참인 동안 반복, 횟수가 정해지지 않은 경우에 많이 사용
+// do ~ while문 : 선 실행하고 후 조건 비교
+
+import java.util.Scanner;
+
+public class WhileEx1 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int age;
+//        while (true) {
+//            System.out.print("나이를 입력하세요 : ");
+//            age = sc.nextInt();
+//            if (age >= 0 && age <= 200) break; // 정상적인 값이 입력되면 탈출
+//            System.out.println("나이를 잘못 입력하셨습니다.");
+//        }
+        do {
+            System.out.print("나이를 입력 : ");
+            age = sc.nextInt();
+
+        } while (age < 0 || age > 200);  //비정상정인 값이 입력되면 탈출할수없음
+
+        System.out.println("당신의 나이는 " + age + "살 입니다.");
+    }
+}
Index: src/Aa/기본연습/BasicEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aa/기본연습/BasicEx.java b/src/Aa/기본연습/BasicEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aa/기본연습/BasicEx.java	(date 1727196336000)
@@ -0,0 +1,30 @@
+package Aa.기본연습;
+/*
+    Date : 2024.09.23
+    Author : 김태우
+    Purpose : 연습용 프로그램
+ */ // 범위주석
+
+public class BasicEx {
+    // public은 접근 제한자, 정적 메서드, void는 반환값이 없음을 의미
+    // main은 프로그램의 시작 지점, 프로그램 실행 시 인자값을 받기 위한 부분
+    public static void main(String[] args)
+    {
+        System.out.println("안녕하세요. 자바를 시작 합니다.");
+        System.out.print(7); //정수값을 출력하고 줄 바꿈 없음
+        System.out.println(700);
+        System.out.println("문자열을 이어서" + "출력하기");
+        System.out.println("성적 : " + 98 + 100); // 성적 98100, 문자열이 앞에 있으면 뒤에도 전부 문자열
+        System.out.println( 100 + 200 + "점수"); // 결합 순서에 따라 출력이 달라짐 정수가 앞에 있으면 정수계산하고 문자열
+        System.out.printf("%d점\n", 300); // %d == decimal
+        System.out.printf("%s\n", "경기도 수원시"); // %s == string
+        char gender = 'A'; // JAVA는 문자와 문자열은 다르다, ' ' = 문자,아스키코드값 " "= 문자열
+        System.out.printf("%d\n",(int)gender);
+        System.out.printf("%c\n", gender); // %c == charator
+        System.out.printf("%.2f\n", 3.1459245);
+        //기본타입은 첫글자가 소문자, 참조타입은 대문자
+        //참조타입은 주소를 찾아서 값을 가져옴
+        int age =23;
+        String name = "곰돌이사육사";
+    }
+}
Index: src/An/반복문/IteratorEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/An/반복문/IteratorEx.java b/src/An/반복문/IteratorEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/An/반복문/IteratorEx.java	(date 1727196336000)
@@ -0,0 +1,32 @@
+package An.반복문;
+// 반복문이란? 주어진 조건이 참인 동안 혹은 정해진 횟수 만큼 반복적으로 프로그램을 수행 하는 것
+// while문, do ~ while문, for문(범위 기반), Enhanced for문(요소의 갯수를 자동 순회)
+
+import java.util.Scanner;
+
+public class IteratorEx {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("정수를 입력 : ");
+        int n = sc.nextInt();
+        int sum = 0; // 값을 누적하기 위한 변수
+//        while (n > 0) { // 참을보지만 조건식의 참을 봐야함 == java 조건식이 아닐경우 Error
+//            sum += n; //sum = sum + n;
+//            n--; // n = n - 1, 값을 대입하지않으면 전위,후위 상관없이 값이 감소 됨
+//        }
+//        System.out.println("합계 : " + sum);
+        for(int i = 1; i < n; i++) {
+            sum += i;
+        }
+        System.out.println("합계 :  " + sum);
+
+        int i = 1;
+        for(; i < n;) {
+            sum += i;
+            i++;
+        }
+        System.out.println("합계 : " + sum);
+
+
+    }
+}
Index: src/Ab/변수연습/VariableEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ab/변수연습/VariableEx.java b/src/Ab/변수연습/VariableEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ab/변수연습/VariableEx.java	(date 1727196336000)
@@ -0,0 +1,50 @@
+package Ab.변수연습;
+// 변수란 값을 저장할 수있는 메모리 공간에 이름을 붙여 놓은 것
+// 자바는 JVM이 미리 운영체제로 부터 메모리를 확보받고 재할당 해주는 개념
+// 자바는 데이터형이 존재하기 때문에 사용 목적에 맞는 데이터 타입을 선언해야 함
+// 특수 문자 중  _  $ 사용 가능
+// 키워드 안됨, 숫자가 앞에 오면 안됨, 공백 안됨
+// camel 표기법 사용, 파이썬은 snake 표기법
+// 변수 이름은 사용 목적에 맞게끔 맞게 지어야 함
+
+public class VariableEx {
+    public static void main(String[] args) {
+
+        //변수 선언만 하는 경우
+        //int age;     //지역변수
+        //String name; //지역변수
+        ////char gender; //지역변수
+        //double avg = 23.99;  //지역변수
+        // 변수 선언과 동시에 값을 할당하는 경우
+        int age = 23;
+        String name = "곰돌이사육사";
+        //지역변수는 해당되는 {} 안에서만 살아있더. 해당 {} Block의 끝을만나면 소멸됨
+        //변수의 사용 범위 : java는 Block Scope 언어 임 {} << 요게 Block(기반의 언어)
+        int n =20;
+        {
+            int m = 30;
+            System.out.println(n + m);
+        }
+
+        byte num1 = 127;
+        num1++;
+        System.out.println(num1); // 오버 플로우 : 허용 범위를 넘어감
+
+        char ch1 = 'A';
+        System.out.println(ch1);
+        System.out.println((int)ch1);
+        char ch2 = 66;
+        System.out.println(ch2);
+
+        float pie = 3.141592f;
+        double pie1 = 3.141592;
+
+        double num10 = 0.0;
+        for (int i = 0; i < 1000; i++)
+        {
+            num10 += 0.1;
+        }
+        System.out.println(num10);
+
+    }
+}
Index: src/Aq/참조타입/ReferenceEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aq/참조타입/ReferenceEx.java b/src/Aq/참조타입/ReferenceEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aq/참조타입/ReferenceEx.java	(date 1727196336000)
@@ -0,0 +1,20 @@
+package Aq.참조타입;
+// 참조타입이란? 할당된 변수에 실제 값이 저장되는 것이 아니라 주소가 저장 됨
+// 참조하는 대상이 없는 경우 : null point exception
+
+public class ReferenceEx {
+    public static void main(String[] args) {
+        String name = "";
+        String name2 = null;
+        int age = 0; // null 값을 사용 불가, 참조 타입이 아니기 때문에
+        Integer age2 =  0; // Auto unboxing 기능이 있음
+
+        int[] arr = null; // 참조 타입은 초기값을 null 지정
+
+        Integer boxVal = null;
+        int intVal = boxVal;
+        System.out.println(intVal);
+
+
+    }
+}
Index: src/Ap/반복문연습/IteratorEx2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ap/반복문연습/IteratorEx2.java b/src/Ap/반복문연습/IteratorEx2.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ap/반복문연습/IteratorEx2.java	(date 1727196336000)
@@ -0,0 +1,50 @@
+package Ap.반복문연습;
+// 내가 풀어본 문제
+
+// 1 ~ 1000까지의 7의 배수를 구하고, 한줄에 10개 항목씩 출력하기
+// for (초기값; 조건식; 증감값)
+
+// 구구단 구하기
+// 단수 입력:
+
+import java.util.Scanner;
+
+// 입력이 5인 경우
+// *****
+// ****
+// ***
+// **
+// *
+public class IteratorEx2 {
+    public static void main(String[] args) {
+//        multipleSeven();
+        multipleTable();
+        multipleStar();
+    }
+//    public static void multipleSeven() {
+//        int sum = 0;
+//        int cnt = 0; //횟수를 구하기 위한 변수
+//        for (int i = 1; i*7 <=1000; i++) {
+//            sum = i * 7;
+//            cnt++;
+//            System.out.printf("%5d", sum );
+//            if(cnt == 10) {
+//                System.out.println();
+//                cnt = 0;
+//            }
+//        }
+//    }
+    public static void multipleTable() {}
+    public static void multipleStar() {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("찍을 별 갯수를 입력 : ");
+        int num = sc.nextInt();
+        for(int i = num; i < 0; i--) {
+            i--;
+            int sum = '*';
+            if(i < num)
+            System.out.printf("%c", sum);
+
+        }
+    }
+}
Index: src/Ac/상수와리터럴/ConstEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ac/상수와리터럴/ConstEx.java b/src/Ac/상수와리터럴/ConstEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ac/상수와리터럴/ConstEx.java	(date 1727196336000)
@@ -0,0 +1,28 @@
+package Ac.상수와리터럴;
+import java.util.Scanner;
+// 상수란? 메모리에 값이 한번 지정되면 변경 할 수 없음
+// 자바에서는 상수 정의를 final 키워드를 사용
+// 상수는 관례상 모두 대문자로 사용
+public class ConstEx {
+    public static void main(String[] args) {
+        final double TAX_RATE = 0.10; //상수 선언시 관례상 대문자로 변수 이름 선언, final 한번 선언한 후는 값을 변경할수없음
+        // 콘솔에서 입력 받기 위해서는 스캐너 클래스에 대한 객체를 생성해야 함
+        Scanner sc = new Scanner(System.in);
+        System.out.print("수입을 입력 하세요 : ");
+        int income = sc.nextInt();
+        System.out.printf("당신이 내야 할 세금은 %.2f ", + income * TAX_RATE);
+
+        System.out.println();
+        // 리터럴이란? 프로그램에서 사용하는 모든 숫자 , 문자, 논리값을 의미
+
+        // 형변환이란? 선언된 타입을 다른 타입으로 변환하는 것
+        // 묵시적 형변환 : 자동 변환이라고 하기도 함, 컴파일러 유리한 방향으로 알아서 바꿔주는 것
+        // 명시적 형변환 : 개발자가 명확한 의도를 가지고 형을 변경하는 것
+        int num1 = 1, num2 =4;
+        double rst = (double) num1 / num2; // <- 명시적 형변환 과 묵시적 형변환이 함께 일어남.
+        System.out.println(rst);
+
+        System.out.println(""+ rst + 10); // 연산자 우선순위에 의해서 문자열로 간주 됩니다.
+        System.out.println(rst + 10 + "10"); // 먼저 숫자형 타입이 계산되고 문자열이추가 됩니다.
+    }
+}
Index: src/Ap/반복문연습/IteratorEx999.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ap/반복문연습/IteratorEx999.java b/src/Ap/반복문연습/IteratorEx999.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ap/반복문연습/IteratorEx999.java	(date 1727196336000)
@@ -0,0 +1,45 @@
+package Ap.반복문연습;
+// 교수님이 푼문제
+
+import java.util.Scanner;
+
+public class IteratorEx999 {
+    public static void main(String[] args) {
+        multipleSeven();
+        multiTable();
+        multipleStar();
+    }
+
+    public static void multipleSeven() {
+        for (int i = 1; i <= 1000; i++) {
+            if (i % 7 == 0) {
+                System.out.printf("%5d", i);
+                if (i % 70 == 0) System.out.println();
+            }
+        }
+        System.out.println();
+
+    }
+
+    public static void multiTable() {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("단수 입력 : ");
+        int n = sc.nextInt();
+        System.out.println("==== " + n + "단 ====");
+        for (int i = 1; i <= 9; i++) {
+            System.out.println(n + " X " + i + " = " + (n * i));
+        }
+    }
+
+    public static void multipleStar() {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("정수 입력 : ");
+        int n = sc.nextInt();
+        for (int i = 0; i < n; i++) {
+            for (int j = 0; j < n - i; j++) {
+                System.out.print("*");
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/Ad/시스템입출력/SystemInOutEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ad/시스템입출력/SystemInOutEx.java b/src/Ad/시스템입출력/SystemInOutEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ad/시스템입출력/SystemInOutEx.java	(date 1727196336000)
@@ -0,0 +1,47 @@
+package Ad.시스템입출력;
+// 자바 표준 입출력 클래스 :
+// System.out.in(표준 입력) : 프로그램내에서 사용자의 입력을 받음 (콘솔 입력)
+// System.out(표준 출력) : 프로그램내의 결과를 콘솔에 출력 (리다이렉션 가능)
+// System.err(표준 오류) : 오류를 출력 하기 위해서 사용 (리다이렉션 안됨), 대체제가 있음(sl4f)
+// print(메서드 오버로딩), println(메서드 오버로딩), printf(서식지정자)
+// 서식지정자 : %d(decimal), %ld(long decimal), %f(float), %.2f, %5d(5칸의 공간을 잡고 오른쪽 정렬)
+// %5d(5칸의 공간을 잡고 오른쪽 정렬), %-5d(왼쪽 정렬), %s(string), %c(character)
+// %%(%기호를 출력)
+// 이스케이프 시퀀스 : \n(줄바꿈), \r(커서를 맨앞으로 이동), \t(탭), \b(백), \\(백슬레시 기호를 출력)
+
+// 파이썬은 함수가 클래스 외부에있을수있고 외부에있는 클래스 내로 들어오면 메서드가되지만 자바에서는 함수가클래스안에만 존재할수있다.
+
+public class SystemInOutEx {
+    public static void main(String[] args) {
+        String name = "김태우";
+        String addr = "경기도 광명시 하안동";
+        char gender = 'M';
+        int age = 30;
+        int kor = 89;
+        int eng = 88;
+        int math = 56;
+        // println(), print() : 메서드 오버로딩
+        System.out.println("===== Java Style 출력 ");
+        System.out.println("이름 : " + name);
+        System.out.println("주소 : " + addr);
+        System.out.println("성별 : " + gender);
+        System.out.println("나이 : " + age);
+        System.out.println("총점 : " + (kor + eng + math));
+        System.out.println("평균 : " + (double)(kor + eng + math) / 3); //형변환할때 ()가로를 붙여서 지정해줘야함 , 나눠서 소수점 발생하니 실수형 double을 넣어준다.
+        // 명시적 형변환과 묵시적 형변환이 {일어남 명시적형변환은 개발자가 묵시적형변환은 컴파일러
+        System.out.println(String.format("평균 : %.2f", (double)(kor + eng + math) / 3));
+
+        // 서식 : 지정자 스타일
+        System.out.printf("======== C Style 출력 ========\n");
+        System.out.printf("이름 : %s\n", name); // %s는 문자열에 대한 서식
+        System.out.printf("주소 : %s\n", addr);
+        System.out.printf("성별 : %c\n", gender);
+        System.out.printf("나이 : %d\n", age);
+        System.out.printf("총점 : %d\n", kor + eng + math);
+        System.out.printf("평균 : %.2f\n", (double)(kor + eng + math) / 3);
+
+        //앞에 대문자가 들어가면 정적필드(클래스),정적 메서드로 구분할수있다.
+
+
+    }
+}
Index: src/As/커맨드입력/CommandInput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/As/커맨드입력/CommandInput.java b/src/As/커맨드입력/CommandInput.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/As/커맨드입력/CommandInput.java	(date 1727196336000)
@@ -0,0 +1,15 @@
+package As.커맨드입력;
+
+import static java.lang.System.exit;
+
+public class CommandInput {
+    public static void main(String[] args) {
+        if(args.length != 2) { //디버그 옆에 액션더보기에 매개변수 추가하고 적용할수있음 프로그램인수에 값
+            System.out.println("인자값이 2개가 필요 합니다.");
+            exit(0);
+        }
+        int num1 = Integer.parseInt(args[0]);
+        int num2 = Integer.parseInt(args[1]);
+        System.out.println("결과 : " + (num1 + num2));
+    }
+}
Index: src/Ae/스캐너클래스/ScannerEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ae/스캐너클래스/ScannerEx.java b/src/Ae/스캐너클래스/ScannerEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ae/스캐너클래스/ScannerEx.java	(date 1727196336000)
@@ -0,0 +1,26 @@
+package Ae.스캐너클래스;
+// 기본적인 데이터 타입에 대한 입력을 Scanner 클래스 메서드르 사용하여 입력 받을 수 있음
+
+import java.util.Scanner; // 스캐너 클래스는 util 패키지내에 존재하므로 import 해줘야 함.
+
+public class ScannerEx {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        // sc : 스캐너 클래스에 대한 참조 변수 (Scanner 클래스로 만들어진 객체의 주소)
+        // new : heap 메모리 할당, heap : 동적 할당, 메모리에 대한 해제를 해야 함. (static heap stack 순)
+        // sc 타입은 Scanner 클래스 타입
+        // System.in : 콘솔로 부터 입력을 받기 위한 객체로 생성
+
+        byte a = sc.nextByte(); // byte 형에 대한 입력 받아서 반환
+        short b = sc.nextShort(); // short
+        int c = sc.nextInt(); // int
+        long d = sc.nextLong();  // long
+        char ch = sc.next().charAt(0); // 스캐너는 문자에 대한 입력 방식이 없음
+        // next() : 공백 기준으로 문자열 입력 받음, 그중에 해당하는 인덱스의 문자를 추출
+        float e = sc.nextFloat();
+        double f = sc.nextDouble();
+
+        String g = sc.next(); // 공백기준으로 문자열을 입력 받음
+        String h = sc.nextLine(); // 줄바꿈 문자 기준으로 문자열 입력 받음
+    }
+}
Index: src/Ar/배열/ArrayEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ar/배열/ArrayEx.java b/src/Ar/배열/ArrayEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ar/배열/ArrayEx.java	(date 1727196336000)
@@ -0,0 +1,45 @@
+package Ar.배열;
+// 자바의 배열은 동일한 데이터 요소가 연속적으로 저장되는 자료 구조
+// int[] arr = new int[4];
+// 자바의 배열은 heap 영역에 메모리가 할당되고, 크기를 지정해야 함
+// 배열의 개선된 형태는 List(Array List, Vector, Linked List)가 있음
+// 배열이나 리스트의 형태는 시퀀스형 자료구조이므로 인덱스로 값이 접근
+
+import java.util.Stack;
+
+public class ArrayEx {
+    public static void main(String[] args) {
+        int[] score = new int[3]; // 길이가 3인 int형 배열 생성
+
+        score[0] = 78;
+        score[1] = 80;
+        score[2] = 90;
+
+        //범위 기반 for문, 배열의 내용을 변경 할 수 있음, 범위를 지정해서 순회 가능
+        for(int i = 0; i < score.length; i++) {
+            score[i] = score[i] + 10;
+            System.out.print(score[i] + " ");
+        }
+        System.out.println();
+        //향상된 for 문 사용, 배열의 내용을 변경 할 수 없음,무조건 전체 순회
+        for(int e : score) {
+            e = e + 10;
+            System.out.print(e + " ");
+        }
+        System.out.println();
+
+        for(int e : score) {
+            System.out.print(e + " ");
+        }
+    }
+    //배열의 선언하는 여러가지 방법
+    static void arrydefine() {
+        int[] score1 = new int[4]; // Heap 영역에 메모리 공간을 확보
+        int[] score2 = {88, 99 ,434}; // 컴파일러 크기를 알 수 있으므로 크기 지정 필요 없음, Heap영역에 안잡히고 리터럴상수로 인식
+        int[] score3;
+        score3 = new int[3];
+        int[] score4;
+        score4 = new int[]{34, 55, 66};
+    }
+
+}
Index: src/Af/입력받기연습/ScannerInputEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Af/입력받기연습/ScannerInputEx.java b/src/Af/입력받기연습/ScannerInputEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Af/입력받기연습/ScannerInputEx.java	(date 1727196336000)
@@ -0,0 +1,29 @@
+package Af.입력받기연습;
+// 이름 : String, next()
+// 주소 : String, nextLine()
+// 성별 : Char, next().charAt(0)
+// 나이 : int, nextInt()
+// === 회원 정보 출력 ===
+// 이름 :
+// 주소 :
+// 성적 :
+// 나이 :
+
+import java.util.Scanner;
+
+public class ScannerInputEx {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        String name = sc.nextLine();
+        //sc.nextLine(); // 버퍼 비우기  <- 엔터를 쳣을때 에러발생 줄바꿈(enter)이라는 입력문자를 처리해주지못하기때문
+        String addr = sc.nextLine();
+        char gender = sc.next().charAt(0);
+        int age = sc.nextInt();
+        System.out.println("=== 회원 정보 출력 ===");
+        System.out.printf("이름 : %s\n", name);
+        System.out.printf("주소 : %s\n", addr);
+        System.out.printf("성별 : %c\n", gender);
+        System.out.printf("나이 : %d\n", age);
+
+    }
+}
Index: src/Au/이차원배열/DoubleArrEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Au/이차원배열/DoubleArrEx.java b/src/Au/이차원배열/DoubleArrEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Au/이차원배열/DoubleArrEx.java	(date 1727196336000)
@@ -0,0 +1,24 @@
+package Au.이차원배열;
+
+public class DoubleArrEx {
+    public static void main(String[] args) {
+        int[][] arr = new int[2][3]; // arr은 주소 stack영역, Heap영역에 저장된  값의 메모리 형태 2행 3열  arr[0][0] ==1행1열, arr[1][0]== [2행][1열]
+        int cnt = 1;
+        for(int i = 0; i < arr. length; i++) {
+            for(int j = 0; j < arr[i].length; j++) {
+                arr[i][j] = cnt++;
+            }
+        }
+        for(int[] ee : arr) { //행 ee위치는 요소 arr은 2행3열 전체
+            for(int e : ee) { // 0 행에 한번 순회 , 1행 순회
+                System.out.print(e + " ");
+            }
+            System.out.println();
+        }
+
+        String[] strArr = {"Java", "Python", "C++", "C", "kotlin"};
+        for(String e : strArr) {
+            System.out.print(e.charAt(0));
+        }
+    }
+}
Index: src/Ag/연산자연습/OperatorEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ag/연산자연습/OperatorEx.java b/src/Ag/연산자연습/OperatorEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ag/연산자연습/OperatorEx.java	(date 1727196336000)
@@ -0,0 +1,92 @@
+package Ag.연산자연습;
+// 산술 연산자 : +, -, *, /, % ( // , ** 없음 파이썬만 있음)
+// 대입 연산자 : =, +=, -=, *=, /=, %=
+// 증감 연산자 : ++, -- (현재 값에서 1을 증가시키거나 감소 시키는 연산자)
+// 비교 연산자 : >, <, >=, <=, !=, ==
+// 논리 연산자 : &&(and), ||(or), !(not)
+// 삼항 연산자 : 조건식 ? 참인경우 수행 구문 : 거짓인 경우 수행 구문
+// 비트 연산자 : 비트 단위의 저수준 조작을 하기 위한 연산자
+
+import java.util.Scanner;
+
+public interface OperatorEx {
+    public static void main(String[] args) {
+        int num1 = 10, num2 =4;
+        System.out.println(num1 + num2);
+        System.out.println(num1 - num2);
+        System.out.println(num1 * num2);
+        System.out.println(num1 / num2); // 정수끼리 나눗셈을 수행하면 몫이 구해짐
+        System.out.println((double)num1 / num2);
+        System.out.println(num1 % num2);
+
+        int num3 = 10, num4 =0; // 0값을 곱하거나 나눴을때 에러났을때 에러를 잡는 방법
+        System.out.println(num3 * num4);
+        try {
+            System.out.println(num3 / num4); // 정수끼리 나눗셈을 수행하면 몫이 구해짐
+            System.out.println((double) num3 / num4);
+            System.out.println(num3 % num4);
+        }
+        catch(ArithmeticException e) {
+            System.out.println("0를 나눌수 없습니다.");
+        } // ArithmeticException= 클래스
+
+        // 증감 연산자 : 해당 변수값을 1 증가 또는 감소 시키는 연산자
+        System.out.println(num1++); // 후위 증가 연산자, 선 대입 후 반영
+        System.out.println(num1);
+        System.out.println(++num1); // 전위 증가 연산자, 선 증가 후 대입
+
+        System.out.println(num1 += 2); // num1 = num1 + 2
+        System.out.println(num1 -= 2); // num1 = num1 - 2
+        System.out.println(num1 *= 2); // num1 = num1 * 2
+        System.out.println(num1 /= 2); // num1 = num1 / 2
+
+        // 비교 연산자 : 두개의 피 연산자를 비교하여, 큰지, 작은지, 같은지를 판단하는 것
+        // 결과 값은 boolean 값으로 반환 (true / false)
+
+        int x = 10, y = 20;
+        System.out.println( x > y ); // false
+        System.out.println( x < y ); // true
+        System.out.println( x == y ); // false
+        System.out.println( x != y ); // true
+        System.out.println( x >= y ); // false
+        System.out.println( x <= y ); // true
+
+        // 논리 연산자 :
+        // && 둘다 만족해야 참, A이고 B
+        // || 둘중 하나만 참이면 참, A 이거나 B
+        // !(not) 현재의 조건에 대한 부정이므로 반대가 됨
+        int f = 10, g = 20;
+        boolean rst1, rst2, rst3;
+        rst1 = (f > 0) && (f > g); // false
+        rst2 = (f > 0) || (f > g); // true
+        rst3 = !((f > 0) || (f > g)); // false
+        System.out.println(rst1 + " " + rst2 + " " + rst3 + " ");
+
+        Scanner sc = new Scanner(System.in);
+        System.out.println("나이를 입력하세요");
+        int age = sc.nextInt();
+        // (조건식) ? 참인 조건 : 거짓인 조건
+        String isAdult = (age > 19) ? "성인" : "미성년자";
+        System.out.println("당신은 " + isAdult + " 입니다.");
+
+        // 연산자 우선 순위 확인
+        int val1 = 5, val2 = 5, val3 = 5;
+        System.out.println(val1 + val2 * val3); //30
+        System.out.println((val1 + val2) * val3); //50
+        System.out.println((val1 + (++val2)) * val3); //55
+
+        //100자리 정수를 입력 받아서 3개의 변수에 나누어 담아서 출력하기
+        //키보드 입력을 받기 위해 스캐너 객체 생성
+        Scanner ac = new Scanner(System.in);
+        System.out.println("정수를 입력 하세요 : ");
+        int num = ac.nextInt(); // 스캐너 클래스로 만들어진 인스턴스 메서드
+        int a = num / 100; // num 값을 100 으로 나눈 몫 (정수형 연산이기 때문)
+        int b = (num % 100) / 10; // 100으로 나눈 나머지를 구하고,다시 10으로 나눈 몫
+        int c = num % 10;
+
+        System.out.printf("100의자리 %d 10의자리 %d 1의자리 %d\n", a, b, c);
+        System.out.printf("100의 자리는 %d\n", a);
+        System.out.printf("10의 자리는 %d\n", b);
+        System.out.printf("1의 자리는 %d\n", c);
+    }
+}
Index: src/At/배열정렬/ArraySort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/At/배열정렬/ArraySort.java b/src/At/배열정렬/ArraySort.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/At/배열정렬/ArraySort.java	(date 1727196336000)
@@ -0,0 +1,19 @@
+package At.배열정렬;
+//정렬 알고리즘 구현해보기 : 버블 정렬 0(n2), 삽입정렬 0(n2), 병합정렬 0(nlogn), 퀵정렬 0(nlogn)
+
+public class ArraySort {
+    public static void main(String[] args) {
+        int[] arr = {9, 4, 3, 10, 5, 8, 7, 6};
+        int tmp = 0;
+        for(int i = 0; i < arr.length; i++) {
+            for (int j = i; j < arr.length; j++) {
+                if (arr[i] > arr[j]) {
+                    tmp = arr[j];
+                    arr[j] = arr[i];
+                    arr[i] = tmp;
+                }
+            }
+        }
+        for(int e : arr) System.out.println(e + " ");
+    }
+}
Index: src/Ah/비트연산자/BitOperatorEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ah/비트연산자/BitOperatorEx.java b/src/Ah/비트연산자/BitOperatorEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ah/비트연산자/BitOperatorEx.java	(date 1727196336000)
@@ -0,0 +1,15 @@
+package Ah.비트연산자;
+
+public class BitOperatorEx {
+    public static void main(String[] args) {    // 128 64 32 16 8 4 2 1
+        int num1 = 10;                          //   0  0  0  0 1 0 1 0
+        int num2 = 12;                          //   0  0  0  0 1 1 0 0
+        System.out.println(num1 & num2); // 8  둘다 참인 값
+        System.out.println(num1 | num2); // 14 둘중 하나라도 참인 값
+        System.out.println(num1 ^ num2); // 6 xor  서로 참이 다른 값
+        System.out.println(~num1); // -11 (2의보수)
+        System.out.println(num1 << 1); // 20 (쉬프트 연산자)  왼쪽 1 쉬프트
+        System.out.println(num1 >> 1); //5  오른쪽1 쉬프트
+        System.out.println(~num2);
+    }
+}
Index: src/Aw/평균점수구하기/AverEx1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aw/평균점수구하기/AverEx1.java b/src/Aw/평균점수구하기/AverEx1.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aw/평균점수구하기/AverEx1.java	(date 1727196336000)
@@ -0,0 +1,28 @@
+package Aw.평균점수구하기;
+// 내가 푼 방법
+
+// 학생수 5명에 대한 성적을 입력 받음
+// 입력 받은 성적 중에서 40점 미만이 있으면 40점으로 올림
+// 평균 점수를 구해서 출력 하기
+// 점수는 모두 0점 이상, 100점 이하인 5의 배수이다. 따라서, 평균 점수는 항상 정수이다.
+
+import java.util.Scanner;
+
+public class AverEx1 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("5명의 학생의 점수를 순서대로 입력 하세요 : ");
+        int a = sc.nextInt();
+        int[] arr = new int[a];
+        int avg = 0;
+
+        for(int i = 0; i < arr.length;i++) {
+            if( arr[i] < 40) {
+                arr[i] = 40;
+            }
+            avg += arr[i];
+        }
+        System.out.print(avg/5);
+
+    }
+}
Index: src/Ai/조건문/ConditionEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ai/조건문/ConditionEx.java b/src/Ai/조건문/ConditionEx.java
new file mode 100644
--- /dev/null	(date 1727268465554)
+++ b/src/Ai/조건문/ConditionEx.java	(date 1727268465554)
@@ -0,0 +1,69 @@
+package Ai.조건문;
+// 제어문: 프로그램의 순차적인 흐름을 제어 할 때 사용
+// 제어문에는 조건문과 반복문이 있음
+// 조건문 :
+// - if, if ~ else, if ~ else if ~ else
+// - switch ~ case 문, 조건식은 올 수 없고 값만 올 수 있음
+// - 삼항연산자
+
+import java.util.Scanner;
+
+public class ConditionEx {
+    public static void main(String[] args) {
+//        Scanner sc = new Scanner(System.in);
+//        System.out.print("정수 값 입력 : ");
+//        int num = sc.nextInt();
+//
+//        if (num >= 0) {
+//            System.out.println("양수 입니다.");
+//        }
+//        else {
+//            System.out.println("음수 입니다.");
+//        }
+//
+//        if (num > 100) {
+//            System.out.println(num + "이 100보다 커요.");
+//        }
+//        else if(num < 100) {
+//            System.out.println(num + "이 100보다 작아요.");
+//        }
+//        else {
+//            System.out.println(num + "이 100과 같아요.");
+//        }
+//
+//        // 조건문 내의 코드가 한줄인 경우는 { }생략 가능
+//        if (num > 100) System.out.println(num + "이 100보다 커요.");
+//        else if(num < 100) System.out.println(num + "이 100보다 작아요.");
+//        else System.out.println(num + "이 100과 같아요.");
+//
+//        //입력 받은 문자가 대문자인지 소문자인지 출력 하기
+//        System.out.print("문자를 입력 : ");
+//        Scanner ac = new Scanner(System.in);
+//        char ch = ac.next().charAt(0);
+//        if ( ch >= 'a' && ch<= 'z') {
+//            System.out.println(ch + "는 소문자 입니다.");
+//        }
+//        else if (ch >= 'A' && ch <= 'Z') {
+//            System.out.println(ch + "는 대문자 입니다.");
+//        }
+//        else {
+//            System.out.println(ch + "는 알파벳이 아닙니다.");
+//        }
+
+
+
+        //100의 자리 정수를 입력 받아서 3개의 변수에 나누어 대입 하기
+        // 354 -> a > 3 b -> 5 c ->4
+        Scanner bc = new Scanner(System.in);
+        System.out.print("정수를 입력하세요 : ");
+        int number = bc.nextInt();
+        int q = number/100;
+        int w = (number/10)% 10;
+        int e = number%10;
+
+        System.out.printf("100의 자리 %d 10의 자리 %d 1의자리 %d", q,w,e );
+
+
+
+    }
+}
Index: src/Av/얕은복사깊은복사/CopyTypeEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Av/얕은복사깊은복사/CopyTypeEx.java b/src/Av/얕은복사깊은복사/CopyTypeEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Av/얕은복사깊은복사/CopyTypeEx.java	(date 1727196336000)
@@ -0,0 +1,20 @@
+package Av.얕은복사깊은복사;
+//
+
+public class CopyTypeEx {
+    public static void main(String[] args) {
+        int[] arr1 = new int[3];  // arr1변수가 가지고 있는건 주소 값은 heap영역
+        int[] arr2 = arr1;  //arr1(주소를) -> arr2에 주소를 넘겨주는것임 heap영역에 같은 메모리의 값을 가지고있기때문에 결과 값아 천,2천,3처으로 찍힘 이게 얕은복사
+
+        arr1[0] = 1;
+        arr1[1] = 1;
+        arr1[2] = 1;
+        
+        arr2[0] = 1000;
+        arr2[1] = 2000;
+        arr2[2] = 3000;
+
+        for(int e : arr1 ) System.out.println(e + " "); // arr1을 값을 출력해도1 1 1 이 아닌 같은 주소를 가지고 마지막에 찍힌 arr2의 1천 2천 3천의 결과값이 나옴
+
+    }
+}
Index: src/Aj/스위치문/memory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aj/스위치문/memory.java b/src/Aj/스위치문/memory.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aj/스위치문/memory.java	(date 1727196336000)
@@ -0,0 +1,30 @@
+package Aj.스위치문;
+
+public class memory {
+    public static void main(String[] args) {
+        String name = "곰돌이사육사"; // "곰돌이사육사" r 밸류는 Static 주소에 할당됨, name 참조변수이며 stac에 할당됨, 리터럴상수의 주소는 Static에 할당됨
+        String addr = "곰돌이사육사";
+        String city = new String("곰돌이사육사"); // new String 클래스로인해  "곰돌이 사육사" 주소는 Heap 영역에 할당됨
+        String awd = new String("곰돌이사육사");
+        if (name == city) {
+            System.out.println("name과 addr의 주소가 같습니다.");
+        } else {
+            System.out.println("name과 addr의 주소가 다릅니다.");
+        }
+        if (name.equals(city)) {
+            System.out.println("name과 addr 내용이 같습니다.");
+        } else {
+            System.out.println("name과 aadr의 내용이 다릅니다.");
+        }
+        if (name == name) {
+            System.out.println("name과 addr의 주소가 같습니다.");
+        } else {
+            System.out.println("name과 addr의 주소가 다릅니다.");
+        }
+        if (name.equals(name)) {
+            System.out.println("name과 addr 내용이 같습니다.");
+        } else {
+            System.out.println("name과 aadr의 내용이 다릅니다.");
+        }
+    }
+}
Index: src/Ax/문자열다루기/StringEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ax/문자열다루기/StringEx.java b/src/Ax/문자열다루기/StringEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ax/문자열다루기/StringEx.java	(date 1727196336000)
@@ -0,0 +1,126 @@
+package Ax.문자열다루기;
+// 문자열이란? 문자가 연속적으로 존재하는 데이터 형
+// 자바에서는 문자의 문자열을 구분함. "문자열", '문자'
+// 자바는 문자열을 참조 타입으로 간주 함
+// 문자열을 표현하기 위해서는 객체를 만들어 사용하거나 리터럴 표기 방식으로 사용 함
+// 리터럴 표기 방식이 가독성이나 성능에서 유리 함
+
+import java.util.Scanner;
+
+public class StringEx {
+    public static void main(String[] args) {
+
+        String name1 = new String("곰돌이사육사");
+        String name2 = "곰돌이 사육사"; // 리터럴 표기방법, 이게 좋음
+        // 문자열 내장 메서드
+        // equals() : 두개의 문자열 내용이 동일한지 비교하여 결과를 반환
+        String a = "hello";
+        String b = "Hello";
+
+        System.out.println(a.equals(b)); // false
+        System.out.println(a.equalsIgnoreCase(b)); //true, 대소문자 구분 안함
+        System.out.println(a == b); // 주소가 같은지를 물어보는 경우가 됨
+
+        //indexOf() : 문자열에서 특정 문자가 시작되는 인덱스값 반환
+        String c = "Hello Java";
+        System.out.println(c.indexOf("Java")); //6
+
+        // contains() : 문자열에서 특정 문자열이 포함되어 있는지의 여부를 반환 있으면 true 없으면 false
+        System.out.println(c.contains("Hello")); // true
+
+        // charAt() : 문자열에서 특정 위치의 문자를 리턴
+        System.out.println(c.charAt(6)); // "J "
+
+        // replace() : 특정 문자열을 다른 문자열로 대체 할 때
+        String d = "안녕하세요. JAVA를 공부 하겠습니다.";
+        System.out.println(d.replace("JAVA", "Python"));
+        System.out.println(d);
+        String f = d.replace("JAVA", "PYTHON");
+        System.out.println(f);
+
+        // replaceAll() : 정규식 적용 가능
+        System.out.println(d.replaceAll("JAVA", "Python"));
+
+        // substring() : 문자열에서 특정 문자열을 뽑아 낼 때 사용
+        String e = "Hello Java";
+        System.out.println(e.substring(5)); // 5에서 부터 끝까지
+        System.out.println(e.substring(6, 8)); // 6에서 8미만
+        // toUpperCase/ toLowerCase
+        System.out.println(e.toUpperCase());
+        System.out.println(e.toLowerCase());
+        // trim() : 문자열의 앞/뒤의 공백 제거
+        String g = "  안녕하세요.    오늘은 날씨가 좋아요.     ";
+        System.out.println(g.trim());
+        // split() : 문자열을 특정 문자열 기준으로 분리하는 메서드
+        String h = "23:45:56";
+        String[] timeStr = h.split(":");
+        for (String el : timeStr) {
+            System.out.println(el + " ");
+        }
+        System.out.println(timeStr[0] + "시" + timeStr[1] + "분" + timeStr[2] + "초");
+        // 문자열 포매팅 : 서식을 지정해서 문자열 만드는 것
+        // System.out.printf(), String.format()
+        System.out.printf("오늘의 온도는 %d입니다.\n", 35);
+        String otherStr = String.format("오늘의 온도는 %d입니다.\n", 35);
+        System.out.println(otherStr);
+
+        // toCharArray() : 문자열을 문자 배열로 반환
+        String strVal = "awiuebfuibweufiwaflafub";
+        char[] chArray = strVal.toCharArray();
+        for (char ec : chArray) {
+            System.out.print(ec + " ");
+        }
+
+        upperLowCh();
+        reverseString1();
+        reverseString2();
+
+    }
+
+    // 실습 문제 : 대문자,소문자로 이루어진 문자열을 입력 받아, 대문자는 소문자로, 소문자는 대문자로 반환
+    // 'A' = 65 'a' = 97 'Z' = 90 'z'=122
+    static void upperLowCh() {
+        // 스캐너 객체 생성
+        // 문자열을 입력 받음
+        // 입력 받은 문자열 길이 만큼 반복 순회하면서 인덱스로 문자 추출
+        // 추출된 문자가 소문자이면 문자 'a' ~ 'A'만큼의 값을 빼줌
+
+        Scanner sc = new Scanner(System.in);
+        System.out.print("영어로된 문자열 입력하세요 : ");
+        // 문자열을 입력 받음
+        String eng = sc.next();
+        // 입력 받은 문자열 길이  만큼 반복 순회하면서 인덱스로 문자 추출
+        for(int i =0; i < eng.length(); i++) {
+            char ch = eng.charAt(i);
+            // 추출된 문자가 대문자이면 문자 'a' - 'A' 만큼의 값을 더해줌
+            if (ch < 'a') System.out.print((char)(ch + ('a'-'A')));
+            else System.out.print((char)(ch - ('a'-'A')));
+        }
+        System.out.println();
+    }
+
+    // 실습 문제 : 입력 받은 문자열을 반대로 출력하기
+    // ex) abcdef => fedcba
+    static void reverseString1() {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("반대로 출력할 영어를 입력하세요 : ");
+        String inStr = sc.next();
+        // 반복문을 역순 순회
+        for (int i = inStr.length() - 1; i >= 0; i--) {
+            System.out.print(inStr.charAt(i));
+        }
+        System.out.println();
+    }
+
+    static void reverseString2() {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("반대로 출력할 영어를 입력하세요 : ");
+        String inStr = sc.next();
+        int pos = inStr.length() - 1;
+        while (true) {
+            System.out.print(inStr.charAt(pos));
+            pos--;
+            if (pos < 0) break;
+        }
+    }
+}
Index: src/Aw/평균점수구하기/AverEx2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aw/평균점수구하기/AverEx2.java b/src/Aw/평균점수구하기/AverEx2.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aw/평균점수구하기/AverEx2.java	(date 1727196336000)
@@ -0,0 +1,27 @@
+package Aw.평균점수구하기;
+// 교수님이 푼 방법
+import java.util.Scanner;
+
+// 학생수 5명에 대한 성적을 입력 받음
+// 입력 받은 성적 중에서 40점 미만이 있으면 40점으로 올림
+// 평균 점수를 구해서 출력 하기
+// 점수는 모두 0점 이상, 100점 이하인 5의 배수이다. 따라서, 평균 점수는 항상 정수이다.
+
+public class AverEx2 {
+    public static void main(String[] args) {
+        // 입력을 받기 위한 스캐너생성
+        Scanner sc = new Scanner(System.in);
+        // 성적을 입력 받기 위한 정수형 배열 생성
+        int[] score = new int[5];
+        int total = 0;
+        // 반복문을 순회하면서 입력 받은 성적이 40미만이면 40으로 변경
+        for(int i = 0; i < score.length; i++) {
+        score[i] = sc.nextInt();
+        if((score[i]) < 40) score[i] = 40;
+        // 배열의 요소값을 더해서 총점 구하기
+        total += score[i];
+        }
+        // 소수점 이하가 없으므로 정수값으로 평균 출력하기
+        System.out.println(total/ 5);
+    }
+}
Index: src/Aj/스위치문/SwitchEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Aj/스위치문/SwitchEx.java b/src/Aj/스위치문/SwitchEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Aj/스위치문/SwitchEx.java	(date 1727196336000)
@@ -0,0 +1,49 @@
+package Aj.스위치문;
+// switch문은 if문과 마찬가지로 조건 제어문 입니다.
+// if문은 조건식의 결과가 true 또는 false에 따라 분기하고,
+// switch문은 변수의 값에 따라 실행문이 결정
+// switch(변수) {
+// case 값 : 정수, 문자, 문자열이 올 수 있음
+//  실행문
+//  break; // switch문을 벗어남
+
+// 참조변수는 주소의 리터럴 상수값이 다르면비교할수없음
+// equals 내용을 비교하는 내부 메서드
+import java.util.Scanner;
+
+public class SwitchEx {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        System.out.print("계절을 입력 하세요 : ");
+        String season = sc.next();  // 앞에 대문자면 참조타입 시즌은 참조변수
+        switch (season){
+            case "spring":
+                System.out.println("꽃이 피는 봄이 왔어요~~~!");
+                break;
+            case "summer":
+                System.out.println("무더운 여름 입니다.");
+                break;
+            case "fall" :
+            case "autumn":
+                System.out.println("선선한 가을 입니다.");
+                break;
+            case "winter":
+                System.out.println("추위가 매서운 겨울 입니다.");
+                break;
+            default:
+                System.out.println("계절을 잘 못 입력하셨습니다.");
+        }
+
+        if (season.equals("spring")) {
+            System.out.println("꽃이 피는 봄이 왔어요~~~!");
+        } else if (season.equals("summer")) {
+            System.out.println("무더운 여름 입니다.");
+        } else if (season.equals("fall") || season.equals("autumn")) {
+            System.out.println("선선한 가을 입니다.");
+        } else if (season.equals("winter")) {
+            System.out.println("추위가 매서운 겨울 입니다.");
+        } else {
+            System.out.println("계절을 잘 못 입력하셨습니다.");
+        }
+    }
+}
Index: src/Ak/등급출력하기/GradeEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ak/등급출력하기/GradeEx.java b/src/Ak/등급출력하기/GradeEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ak/등급출력하기/GradeEx.java	(date 1727196336000)
@@ -0,0 +1,32 @@
+package Ak.등급출력하기;
+// 국어, 영어, 수학 성적을 입력 받아서 총점을 구하고
+// 평균이 90점이상이면 A
+//        80점 이상이면 B
+//        70점 이상이면 C
+//        60점 이상이면 D
+//        나머지는 F
+// 각각의 성적은 0 ~ 100으로 입력되어야하고 입력값이 잘못된 경우 재입력을 받아야 함.
+
+import java.util.Scanner;
+
+public class GradeEx {
+    public static void main(String[] args) {
+        while (true) {
+            Scanner sc = new Scanner(System.in);
+            System.out.println("성적 입력 (국어 영어 수학) : ");
+            int kor = sc.nextInt();
+            int eng = sc.nextInt();
+            int math = sc.nextInt();
+            if ((kor < 0 || kor > 100) || (eng < 0 || eng > 100) || (math < 0 || math > 100)) {
+                System.out.println("성적 정보가 잘 못 입력 되었습니다.");
+            } else {
+                double avg = (double)(kor + eng + math );
+                if (avg >= 90) {System.out.println("A");}
+                else if (avg >= 80) {System.out.println("B");}
+                else if (avg >= 70) {System.out.println("C");}
+                else if (avg >= 60 ) {System.out.println("D");}
+                else {System.out.println("F");}
+            }
+        }
+    }
+}
Index: src/Ay/KMP암호화/KmpRx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ay/KMP암호화/KmpRx.java b/src/Ay/KMP암호화/KmpRx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Ay/KMP암호화/KmpRx.java	(date 1727196336000)
@@ -0,0 +1,44 @@
+package Ay.KMP암호화;
+// Knuth-Morris-Pratt => KMP
+// Korea-Seoul => KS
+// Mirko-Slavko => MS
+
+import java.util.Scanner;
+
+public class KmpRx {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        String name = sc.next();
+
+        // 문자열에서 문자 추출 후 대문자만 골라서 찍기 (ASCII코드 확인)
+        for(int i= 0 ; i < name.length() ; i++){
+            if(name.charAt(i) >= 'A' && name.charAt(i) <= 'Z') {
+                System.out.print(name.charAt(i));
+            }
+        }
+        System.out.println();
+
+        // 0번째 문자 출력, '-' 다음 문자 출력
+        for(int i = 0; i < name.length(); i++) {
+            if(i == 0) System.out.print(name.charAt(i));
+            else {
+                if(name.charAt(i) == '-') System.out.print(name.charAt(i+1));
+            }
+        }
+        System.out.println();
+
+        // split('-') 기준으로 자르고 0번째 문자 출력
+        String[] strSplit = name.split("-");
+        for(String e : strSplit) {
+            System.out.print(e.charAt(0));
+        }
+        System.out.println();
+
+        // toCharArray()를 사용해서 문자 배열로 만들고 대문자만 골라내기
+        char[] chName = name.toCharArray();
+        for (char e : chName) {
+            if(e >= 'A' && e <= 'Z') System.out.print(e);
+        }
+
+    }
+}
Index: src/Al/스위치문계산기/SwitchEx2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Al/스위치문계산기/SwitchEx2.java b/src/Al/스위치문계산기/SwitchEx2.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Al/스위치문계산기/SwitchEx2.java	(date 1727196336000)
@@ -0,0 +1,30 @@
+package Al.스위치문계산기;
+// 스위치문으로 간단한 계산기 만들기
+
+import java.util.Scanner;
+
+public class SwitchEx2 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int x = sc.nextInt(); // 좌변
+        char op = sc.next().charAt(0); // 연산자
+        int y =sc.nextInt(); // 우변
+
+        switch (op) {
+            case '+':
+                System.out.println("덧셈 : " + (x + y));
+                break;
+            case '-':
+                System.out.println("뺄셈 : " + (x - y));
+                break;
+            case '*':
+                System.out.println("곱셈 : " + (x * y));
+                break;
+            case '/':
+                System.out.println("나눗셈 : " + ((double)x / y));
+                break;
+            default:
+                System.out.println("연산자를 잘 못 입력하셨습니다.");
+        }
+    }
+}
Index: src/Am/상근이알람/AlarmEx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Am/상근이알람/AlarmEx.java b/src/Am/상근이알람/AlarmEx.java
new file mode 100644
--- /dev/null	(date 1727196336000)
+++ b/src/Am/상근이알람/AlarmEx.java	(date 1727196336000)
@@ -0,0 +1,34 @@
+package Am.상근이알람;
+//내가 풀어본 문제
+
+import java.util.Scanner;
+
+public class AlarmEx {
+    public static void main(String[] args) {
+        // 스캐너 객체 생성
+        // 시간 입력 :
+        // 분 입력 :
+        // 시간과 분을 분으로 환산
+        // 계산된 분이 45 미만이면 하루의 시간을 더해주고
+        // 계산된 시간에서 45를 빼줌
+        // 다시 시간과 분으로 환산해서 결과 출력
+
+        Scanner sc = new Scanner(System.in);
+        int hour = sc.nextInt();
+        int min = sc.nextInt();
+        if ((hour < 0 || hour > 25) || (min < 0 || min > 60)) {
+            System.out.println("시간을 잘못 입력하셨습니다.");
+        }else { int avg_time = (hour*60 + min);
+            if(avg_time < 45) {
+                int avg_time2 = (1440 + min) - 45;
+                hour = avg_time2 / 60;
+                min = avg_time2 % 60;
+                System.out.printf("예정된 알람시간은 %d시 %d 분 입니다.", hour, min);
+            } else { int avg_time2 = (hour*60 + min) - 45;
+                hour = avg_time2 / 60;
+                min = avg_time2 % 60;
+                System.out.printf("예정된 알람시간은 %d시 %d분 입니다.", hour, min);
+            }
+        }
+    }
+}
